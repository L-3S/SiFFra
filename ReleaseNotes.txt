**************************************************************************
09/09/2021 FBSF version 2.0
Recompilation imperative des projets
**************************************************************************
	1. Implementation du mode full batch (sans Module Logic ou Module Graphic.)
	
	QTCreator : Pour activer le build du mode batch on ajoute une "build configuration" BATCH 
					  dans la page du Build du projet FBSF	avec en Aditional arguments du Build step "qmake" : 
					  CONFIG+=BATCH
					  
	Build.bat : script de build 
					avec argument batch lancement du build full batch
					sans argument : prompt le choix release ou debug.
	
	Dans le FbsfFramework.pro une alternative de configurationdetermine les instructions de build.
	Note : Cette définition est également appliquée au FbsfPlublicData.pro

	en mode batch, un mot clé DEFINE +=MODE_BATCH indique au compilateur le code a compiler/linker.

		TEMPLATE = app
		DESTDIR = ../lib
		............................
		BATCH {# Configuration for batch code
			message( "Configuring FbsfFramework for BATCH build..." )
			TARGET  = FbsfBatch
			CONFIG  += console
			QT      += xml network
			DEFINES += MODE_BATCH
		}
		else {# Configuration for gui code

			TARGET = FbsfFramework
			QT      += gui qml quick xml widgets network
		}
	Les deux executables FbsfFramework.exe et FbsfBatch.exe sont disponibles dans le dossier lib.

	Note : La FbsfPlublicData.dll est donc differentiée et en dépendance de FbsfBaseModel.dll
			  Ceci implique que les jeux de binaires pour les 2 modes ne peuvent coexister dans le meme dossier.
			  Il convient d'exporter le jeux de binaires full batch dans un dossier dédié.

	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Resources binaires nécessaires pour un mode batch (hors application APP_HOME):
	
		FbsfBatch.exe
		FbsfBaseModel.dll, FbsfPublicData.dll et FbsfNetwork.dll
		Qt5Core.dll, Qt5Xml.dll et Qt5Network.dll
		7z.exe et 7z.dll
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
	2. Ajout d'un attribut de la configuration xml pour tracer les performances :

            - pour chaque séquence et sous-séquence :  initialisation, step, finalisation.
            - pour chaque module : initialisation, pré-step,step,post-step, finalisation.

    Le mode est activé selon l'attribut <perfMeter>true/false</perfMeter> de la configuration.

    Les infos de timing sont disponibles :

        - dans un logfile du current dir (PerfMeter.csv), le dump est réalisé a chaque step (on peut utiliser BareTail en suivi)
        - dans la zone d’échange pour les perf du step (<nom>:Cpu*).

**************************************************************************
08/03/2021 FBSF version 1.13
Recompilation conseillé des projets
**************************************************************************
-[FOB 407]		 
           Permettre de choisir quelle image on veut afficher à l'init du simulateur.
           Dans la partie simulation du fichier de config xml, il faut rajouter cette balise :
           <intialimage>Maison</intialimage>
           Maison est le name de soit ton image à façon soit le nom du module FbsfEditor ect 

-[FOB 286] Pour la config intiale, il faut rajouter dans la section globale simualtion 
    <simulation version="1.0">
        <timestep>90</timestep>
        <speedfactor>0.0005</speedfactor>
        <hideSnapControlBtn>true</hideSnapControlBtn>
        <initialPlotList>test.xml</initialPlotList>
    </simulation>

-[FOB 370] Bug Plotter sur les "Display Unit"


**************************************************************************
14/10/2020 FBSF version 1.12.3
Recompilation obligatoire des projets
**************************************************************************
- Bug bloquant de coruption mémoire sur la gestion du backTrack
- Restructuration de la doc Designeur
- Acceptation de flag false pour les hideBtn de la ToolBar dans la config xml


**************************************************************************
25/09/2020 FBSF version 1.12.2
Recompilation obligatoire des projets
**************************************************************************
-[FOB 364] A l'activation du mode backtrack le slider se met automatiquement sur le dernier temps avec le futur pour rendre l'ihm de supervision coherante
-[FOB 363] Les préférences d'affichage du plotter n'étaient pas toutes enregistrées [courbes filled, steped, ...]
-[FOB 362] Mise à jour de la doc pour le flag SimuMpc 
-[FOB 361] la toolbar dispose d'un bouton help dédié ainsi que le monitor et le plotter (lancement du pdf associé avec restructuration de la doc MUT)
-[FOB 359] un plugin qui veut etre éligible au backtrack doit définir dans son "main.qml" la variable suivante property bool backtrackable:true
-[FOB 358] Harmonisation de la présentation des "name" dans le monitor et la combobox de la ToolBar
-[FOB 333] Les boutons de l'AppToolbar sont en option :
           Pour cacher un bouton Config xml section simulation, Il faut inserer les balises avec une valeure non nulle :
                   <hideStepBtn>true</hideStepBtn>
                   <hideStepCrtBtn>true</hideStepCrtBtn>
                   <hideSnapControlBtn>true</hideSnapControlBtn>
           Pour faire apparaitre un bouton suprimer la balise.

- Ajout d'un objet de la lib graphique permettant de naviguer entre les visus par parametrisation 
 du nom du plugin associé.

**************************************************************************
05/07/2020 FBSF version 1.12.1
**************************************************************************
-Bug Risiduel de la 1.12. notamment Backtrack en mode Timedepends
-Mise à jour de lib graphique avec le flag  simuMpc (Config Xml) pour l'activation du mode "TimeDepends"
-Le flag est par defaut à "false" pour l'activation du modeMpc rajouter la dans la section global de la config xml
         <simuMpc>true</simuMpc>


**************************************************************************
30/06/2020 FBSF version 	1.12
Mise à jour du code des modules et recompilation obligatoire des projets
Tests Windows MSVC 2017 QT 5.15.0
**************************************************************************
-[FOB 355]Fonctionnalités de backtrack (Mode Std et Time Depends): Nouveau bouton dans la toolbar permet d'afficher un slider et des boutons de run cyclique 
-[FOB 351] Gestion des paramètres des modules unfiée (Récup Dev CEA) 
-[FOB 354] Intégration de modification CEA pour le module FMU (Gestion des boolean, ...)
-[FOB 284] Possibilité d'avoir des séquences en parallèle à l'intérieur d'une séquence principale
-Library :Objets pour GraphicEditor Bargraph (normal/timedepends)

**************************************************************************
03/09/2019	FBSF version 1.11.3
**************************************************************************
[FOB 283] Affichage optionel des documents Visuel (Logic et Graphic) 
CrossCompilation de Fbsf pour RaspberryPi (essentielement C++11 dans les .pro) 

 
**************************************************************************
24/06/2019	FBSF version 1.11.2
**************************************************************************
[Bug 282] Passage de Fbsf sous Linux 
Test Linux Ubuntu GCC7 QT 5.13
Test Windows MSVC 2017 QT 5.11.1
recompilation obligatoire des projets 

14/06/2019	FBSF version 1.11.1 (QT 5.11.1) recompilation obligatoire des projets
		Retour sur le [Bug 280] Prefixage automatique des inputs / outputs d'un fmu
		Le moduleName n'ets plus passé en argument de la fonction LoadFMU car le nom est traité par la BaseModule.
		Le module MacroFmu n'est plus à modifier mais la recompilation reste nécessaire.
		Rappel :
		Suite à la correction en version 1.11.0 du [Bug 281] Gestion des noms de Sockets Dynamiques dans FbsfEditor Logic, 
		 il faut reconnecter dans tous les documents Logic la première socket des objets avec connexion dynamique


11/06/2019	FBSF version 1.11.0 (QT 5.11.1) recompilation obligatoire des projets 

		1. [Bug 279] Variante pour la présentation des courbes Echelon Steeped Middel
		2. [Bug 280] Prefixage automatique des inputs / outputs d'un fmu
		WARNING
			le Tag1 est issue maintenant de la config simu.xml nom du module de type FMU balise "name"
				
		3. [Bug 281] Gestion des noms de Sockets Dynamiques dans FbsfEditor Logic
		WARNING		
			Logic de codage des composants avec deux cas possibles :
			i) Connecteurs indifférenciés (ex : "And" Gate) : socketContainerLeft.setPort("u","input","bool"); noms : u0,u1,u2,u3,...
			ii)Connecteurs différenciés (ex : "CsvImport")  : socketContainerRight.setPort((statesvar.varList)[i],"output","real",true); noms : mySocketName,myOtherSocketName,...
		4. Alignement d'objets dans FbsEditor (Top, Down, Left, Right)
		5. Sychnornisation bibliothèque Logic CEA recu par mail
		6. Nouveaux objets pour la bibliothèque Graphic Std

21/09/2018	FBSF version 1.10.1 (QT 5.11.1)


		[Bug 198] Ajout de l'info type et module consommateur pour chaque variable en ZE - vue moniteur
		[Bug 254] Plantage à l'affichage de certaines variables dans le plotter
		[Bug 255] Prise en charge des vecteurs temporels créant une boucle entre modules		
		[Bug 256] Saisie des paramètres en format scientifique dans un bloc logic…


11/09/2018	FBSF version 1.10.0

		1. Choix du nombre de pas dans le moniteur, il est possible : 
			de spécifier un nombre de pas entier applicable aux modes « run » et « au plus vite »
			de choisir de geler ou de quitter le simulateur à la fin de la simulation de ce nombre de pas. 
			Si un gel de la simulation est déclenché par l’utilisateur avant la fin des pas demandés, le simulateur est gelé.
			Le nombre de pas restant est affiché et s'exécute dés la sortie du mode "pause".

		2. Publication des commentaires et des unités CAO,
			Ajout au niveau du composant QML des properties "unit" et "description" 
			pour les publications SignalXXX scalar et vector de type  int et real 
			exemple : 
				property real mCommand: 0.0
				SignalReal{	tag1			 : nodeName;
									unit			 : "var unit"
									description : "var description"
									value		 : mCommand
								}
								
		3. Spécification de pages de courbes actives à l’initialisation de la simulation
			Les noms de fichier xml relatif a APP_HOME sont spécifiés dans le fichier plugins.xml (section Plotter).
			Le fichier plugins.xml est positionné dans le CURRENT_DIR pour masquer celui de FBSF:
			Exemple : 
				<Plugin>
					<name>Plotter</name>
					<path>qml/UIplugins/FbsfPlotter</path>
					<plotlist>
						<plot file="plotFT1.xml"/>
						<plot file="plotFT2.xml"/>
					</plotlist>
				</Plugin>

		4. Mise en place d’un mécanisme «displayUnit» dans le plotter,
			La liste des variables disponibles à gauche dans la fenêtre du ploter, 
			affiche en plus l’unité de chaque variable ainsi que le commentaire associé.
			Le plotter dispose d’un fichier de configuration "DisplayUnit.csv" dans le APP_HOME
			pour les changements d’unités basés sur une formulation linéaire simple : Unit2 = a * Unit1 + b.
			La règle suivante est vérifiée:
				- Une même «Unit» ne peut pas avoir plusieurs «DisplayUnit»
				- Différentes «Unit» peuvent avoir la même «DisplayUnit».
			Format du fichier DisplayUnit.csv :
				# Unit ; DisplayUnit ; a ; b
					K;degC;1;-273.15
					J;kWh; 2,77778e-7;0

		5. Généralisation de la notion de paramètre de la norme FMI.
			Les parametres et constantes de type "string" ne sont pas concernés par cette évolution.

			Modeles manuel FMI
			Une classe intermédiaire "FBSFBaseModelFMI" implémente le parsing des fichiers de type «modelDescription.xml» 
			et déclare les paramètres "fixed" et "tunable" du module manuel.
			La classe FbsfBaseModel implémente la nouvelle API pour déclarer les paramètres (fixed et tunable).

			Modeles CAO Logic
			Le node inspector présente les deux types avec le type constant en readonly. 
			Le format QML texte des documents CAO, permet de modifier la valeur initiale d’un paramètre.
			
			Options de la configuration :
			    <simulation version="1.0">
					......
				    <publishparam>true</publishparam>
					<snapshotparam>false</snapshotparam> 
					
			<publishparam> : Les paramètres «tunable», des modules CAO Logic, ManualWithMD et FMU, 
										apparaissent dans la liste du moniteur avec un code couleur.
										Ils sont modifiables depuis l’interface comme le sont les importeurs non résolus.
										Note : l'option <publishparam> remplace l'option <showparam> des modules FMU.

			<snapshotparam> : Les paramètres «tunable» sont sauvegardés dans les clichés.

		6. [Bug 198] New: Ajout de l'info type et module consommateur pour chaque variable en ZE - vue moniteur
			La liste des consommateurs s'affiche comme un tooltip par un click gauche "press and hold" sur la ligne.
			
		7. [Bug 236] Les parametres "Time depend" pastSize, futurSize et timeShift sont disponibles par heritage dans les composants Logic CAO
			Il n'est plus utile d'utiliser le XmlListModel qui produit des asynchronisme en mode batch.
		
		8. [Bug 212] Message d'erreur au chargement de modules
			Ajout de precision au message d'erreur
					"1. Check if the dll is in the library PATH"
					"2. Check if the dll dependencies are in the library PATH"

		9. [Bug 243] Option sur les modules FMU pour activer le prefixage automatique des I/O (separateur ".")
							l'option <prefixinput>true</prefixinput> permet d'ajouter le nom de module aux inputs et parametres tunable
							l'option <prefixoutput>true</prefixoutput> permet d'ajouter le nom de module aux ouputs et parametres fixed
							
		10. [Bug 251] Implementation de la fonction QT_MESSAGE_PATERN permettant le formattage du logfile.
		
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~						
		
11/06/2018	FBSF version 1.9.0

		1. Implémentation du delay guard hors mode batch (10 ms) en mode fast pour éviter le blocage IHM.
		
		2. Bug 144 : gestion des retours d'erreurs depuis les modules (codage FBSF_OK/FBSF_ERROR)
							Ajout du bouton indicateur warning avec accès direct au logfile.
							
		3. Bug 180 : un fichier replay <config>.dat est sauvegarde systématiquement lors de la sortie de l'application.
		
		4. Implémentation du mode batch (option -batch). 
			La sortie du batch est gérée au niveau applicatif 
				ex : if (mSimulationTime>50) ExecutiveControl("stop");
			En fin de batch, le fichier de résultats <config>.dat  est produit dans le répertoire d’exécution.
		
		5. Une API (Tools/FbsfReplayFileAPI) permet de consulter :
			La liste des variables avec leur informations (voir exemple main.cpp).
			Pour chaque variable les valeurs entre le temps début et fin (voir exemple main.cpp).
			Pour produire une documentation html, utiliser doxygen avec le fichier DoxyFile.dxg			

5/05/2018			FBSF version 1.8.3

		1. Control de duplication des OutPort
		
		2. Correctif sur les InPorts
		
		3. Implementation du goto sur OutPort et InPort (double click)
			Sauf pour les OuPort vers plusieurs Inport (Menu a prevoir)

17/11/2017		FBSF version 1.8
		
		1. Correctifs (cf Bugzilla : 8, 56, 61, 62,63,64 et 65)

15/07/2017		FBSF Version V1.7.2

		1. Evolution de l'algorithme de calcul des retards (conservatif et reduction)

08/07/2017		FBSF Version V1.7.1

		1. Gestion des connexions retardee en cliche

21/06/2017      FBSF version 1.7

		1. Ajout de plotter multi-document dans le Grapher (open Plotter et D&D depuis l'inspecteur)
		
        2. Simplification de l'implémentation des dynamic ports (cf document de portage + exemples)

        3. Apres sauvegarde de document existant, la déclaration du nodeType est optionnelle dans les composants.

        4. Possibilite de forcage des entrées avec verrou dans l'inspecteur.
				
		5. Gestion de Undo dans l'editeur (1 niveau a valider, multi-niveau avec Redo en version ultérieur)
		    
			Add/Remove/Move Object
			Add/Remove/Move Link
			Clone/Remove/Move Selection
		
		6. Gestion de sauvegarde des états en memoire (API) et en fichier (UI).
		
			Déclaration des variables d'état :
			
				C++ : state(QString name, <type>* address) avec <type>=int,real,QVector<int>, QVector<real>
			
				QML : property var states     : {'value':0}
				
			API pour sauvegarde/restitution memoire des entrees, états et sorties :	doStaveState() et doRestoreState()
				
			La gestion en fichier s'applique egalement au FMU avec sauvegarde/restitution des entrees, états et sorties.
			
		7. Ajout des donnes tabulées dans le plotter avec time line par selection de ligne ou click dans le plotter
			
			La vue n'est affichée qu'en mode pause ou step by step (pour des raisons de performance).
			
		8. L'affichage du temps des plotter est configurable en temps elapsed ou date UTC
			La précision s'adapte a la période de temps visualisée.

			Le temps simulé du bandeau s'affiche en elapse time simulé depuis T=0 limité au format h:m:s[:ms]
			
			Pour avoir l'affichage en date UTC dans les plotters :

				- En mode standard, pour un affichage date UTC avec temps UTC initial [optionnel], ajouter dans la configuration xml
			
			    <simulation version="1.0">
						<timeformat>utc</timeformat>
						<timestart>2015-03-25T12:00:00Z</timestart>

					Pour le format date voir : https://www.w3schools.com/js/js_date_formats.asp

				- En mode "time depend" : par convention c'est du mode UTC par défaut alimenté par le code applicatif.

02/03/2017      FBSF version 1.6

		1. Ajout d'un editeur de diagrammes logiques
		
		2. L'aide en ligne utilise le navigateur local.


10/09/2016      FBSF version 1.5

        1. Ajout d'un flag <showparams>true</showparams> pour les modèles FMU 
        
        2. Intégration de la fonction "Replay" dans le Framework.
           Après sauvegarde d'un séquence de simulation, relancer l'application et 
           rejouer avec la commande suivante :
           
					FbsfFramework.exe -replay=<replay file>

           Deux mode possible selon la présence ou non d'exporteur

            Aucun exporteur : replay full avec Slider
            Au moins un exporteur : replay partiel sans Slider

        3. Integration du plotter standard.

        4. Production d'un installeur binaire.

        Impact pour l'utilisateur :

        4.1. Un fichier plugins.xml de l'espace projet (optionel) référence les plugins Fbsf avec les chemin suivant :

            <?xml version="1.0" encoding="UTF-8" ?>
            <Items>
                <PluginsList>
                    <Plugin>
                        <name>Monitor</name>
                        <path>qml/UIplugins/FbsfMonitor</path>
                    </Plugin>
                    <Plugin>
                        <name>Plotter</name>
                        <path>qml/UIplugins/FbsfPlotter</path>
                    </Plugin>
                </PluginsList>
            </Items>

        4.2. Pour lancer le framework depuis un projet externe, utiliser un runtime.bat en 
             adaptant le chemin de l'installation :

        rem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        rem Path for framework
        rem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        set FBSF_HOME=<chemin d'installation FBSF>
        rem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        call %FBSF_HOME%\runtime.bat
        rem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        rem Path for Project
        rem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        set PATH=%~dp0lib;%PATH%
        rem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        rem argument 1 : le fichier xml de la configuration exécutable
        rem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        if not "%1"=="" start FbsfFramework.exe %1

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
24/05/2016      FBSF version 1.4

1.      Ajout de declaration de vecteur exportés dans le QML 

        SignalVectorInt{id : sigVectorInt;
                        tag1: "UITesteur.VectorInt";
                        property int val:0;
                        property var vector:[1,2,3,4,5]
                        data: vector
                        }

        SignalVectorReal{id : sigVectorReal
                        tag1: "UITesteur.VectorReal"
                        data:[0.1,1.2,3.4,4.5,5.6]}
                        
2.      Gestion d'historisation en zone d'échange de scalaires et des vecteurs

3.      Gestion des vecteurs "time depends"
        Le mode Time depend permet de produire des piles de données temporelles
        La base de temps est le vecteur publié sous le label "Data.Time"
        Note : la publication de ce vecteur est un indicateur du mode

		Ajout d'arguments aux methodes publish des vecteur (int et float) :
		
			timeshift : indicateur de vecteur dépendant du temps et du décalage temporel (0 par défaut)
			timeindex : l'index du temps courant dans le vecteur (0 par défaut)
			history : indicateur d'historisation (défaut true)

		Exemple d'utilisation dans le C++
			// size and publish data time
			TimeData.resize(pastsize+futursize);
			publish("Data.Time",&TimeData,"s","Data Time from Producer",timeshift,pastsize);
		
        Exemple d'utilisation dans le QML  :
        
			SubscribeVectorInt{id : timeBase; tag1: "Data.Time"}
			.......
			// get history data
			currentTime=timeBase.history[timeBase.history.length-1]
			// get current vector data
			vectorSize=timeBase.data.length
			// get timeshift (shift steps) and time index (current time data)
			timeshift=timeBase.timeshift
			timesindex=timeBase.timeindex

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
01/04/2016      FBSF version 1.3

Changes :

1.      Ajout des types QVector<int> et QVector<float> aux échanges
        Le producteur déclare un vecteur et sa taille > 0 .
        Le vecteur ne peut pas être retaillé après déclaration
        déclaration : publish("name",&vectorOut,"unit","comment");
        Le consomateur déclare un vecteur de taille VIDE.
        déclaration : subscribe("name",&vectorIn,"unit","comment");

        Dans le QML seul l'abonnement est possible :

        exemples (data est la liste des valeurs) :
        property int var
        property int size
        SubscribeVectorInt{id:vectorInt;
            tag1: "...."
            onDataChanged: {var=data[0];size=data.length}
        }
        property var list:[]
        SubscribeVectorReal{id:vectorReal;
            tag1: "...."
            onDataChanged: {list=data}
        }


2.      Ajout de filtres au monitor et plotter
        La logique est : producteur ET (nom OU unit OU description)


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
03/01/2016	FBSF version 1.2

Changes :

1.	 Ajout d'un binding C++ FbsfMessageBox bloquant

2.	 Renommage des binding FbsfExporter et FbsfImporter du QML
	   Les symbols sont renommés en fonction de la sémantique
	   FbsfExporter devient Signal et FbsfImporter devient Subscribe

3. 	 Ajout de composants utilitaires Charts et Tooltip pour le QML
	   Usage : 
		    import Components 1.0 

4.	 Redirection des stream stdout et stderr vers un fichier log (nom de la config)

5. 	 Identification des niveaux d'erreur dans le log (Warning, Critical et Fatal)

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
01/11/2015      FBSF version 1.1

Changes :

1.    Le fichier descriptif des plugins du framework (plugins.xml) est localisable 
      à la racine du projet.A défaut celui du framework est utilisé.
      
2.    Les échelles du plugin traceur sont configurables dans le fichier plugin.xml

        <Plugin>
            <name>Plotter</name>
            <path>FbsfFramework/qml/UIplugins/FbsfPlotter</path>
            <plotscales>
                <scale display="10mn" range="600"/>
                <scale display="2h" range="7200"/>
                <scale display="4h" range="14400"/>
                <scale display="8h" range="28800"/>
            </plotscales>
        </Plugin>

3.  La section modèles du fichier xml projet est extensible pour des clés utilisateur

                 <model version="1.0">
                     <module>ModuleTEST</module>
                     <name>testeur2</name>
                     <type>manual</type>
                     <cle1>value1</cle1>
                 </model>

    La valeur est récupérable comme QString dans le module par l'instruction : config()["cle1"]

4.  Il est désormais possible de positionner une option de trace depuis de shell (.bat)

        set FBSF_TRACE=PublicData

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
16/10/2015      FBSF version 1.0

Changes :

1.    Le projet est restructuré pour séparer le framework de l'application.

     1.0 L'environement est positionné depuis le fichier Production.bat de l'application
         Ce fichier doit exécuter le fichier d'environnement du framework en fin de fichier. 
         ex : call ....\FBSF\Production.bat
     1.1 Le framework est chargé dans QtCreator depuis le  FBSF.pro (multi-projets))
     1.2 l'application est chargée dans QtCreator depuis le  XXX.pro (multi-projets))
     
2.   Les messages de l'application sont enregistrées dans un fichier logfile.txt
     L'option -no-logfile permet d'avoir les messages en console depuis le QtCreator

3.  Le schéma d'exécution intègre la notion de séquence et d'itérations
    Cette évolution concerne le fichier de configuration xml de l'application.
                                                                      
    3.0 Une séquence se définie par un nom et un nombre d'itérations (optionnel) dans un cycle
             <name>Testeur</name>
             <iter>24</iter> 
        les modules sont exécutés 24 fois par cycle (de périodicité=timestep)
        Les modules sont exécutés dans l'ordre et en rafale (sans temporisation)   
    
    3.1 Les séquences sont synchronisée en début de cycle et s'exécutent en parallèle    
    3.2 Une séquence exécute les modules dans l'ordre déclaré
    3.3 chaque module exécute consume/doStep/produce (mode pipeline)
    3.4 Un module (dll) peut être instancié plusieurs fois,il se défini par 
        <module> le nom de la dll (sans extension),
        <name> le nom d'instance,
        <type> manual, fmu

    3.5 Pour un module FMU on peut spécifier le timestep (pas d'intégration) 
        qui est décorrélé du timestep global : période de cadencement (cycle).
            <name>Reseau</name>
            <path>models/Reseau/Reseau.fmu</path>
            <type>fmu</type>
            <starttime>0.0</starttime>
            <!--stoptime>40000</stoptime-->
            <timestep>3600</timestep>
            <dumpcsv>false</dumpcsv>
            
4.  Le temps simulé peut être calculé et exporté par un module applicatif.
    dans ce cas, le système exécutif inhibe le calcul et l'export de son temps simulé.
    
    ex : 
            ajout du membre 
                float mSimulationTime;
            initialisation dans le constructeur  
                mSimulationTime(0)
            declaration dans le doInit() :
                publish("Simulation.Time",&mSimulationTime,"s","Simulation Time from xxx");               
            Calcul du temps simulé das le doStep()
                mSimulationTime+=xxxxx;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
exemple de configuration avec :
    cycle : 5 s  
    2 sequences en parallèle:  1 et 10 itérations, 1 et 2 modules

<Items>
    <simulation version="1.0">
        <timestep>5</timestep>
        <speedfactor>1</speedfactor>
    </simulation>
     <sequences>
         <sequence>
             <name>Testeur</name>
             <iter>1</iter>
             <models>
                 <model version="1.0">
                     <module>ModuleTEST</module>                     
                     <name>testeur1</name>
                     <type>manual</type>
                 </model>
            </models>
         </sequence>
         <sequence>
             <name>Testeur</name>
             <iter>10</iter>
             <models>
                 <model version="1.0">
                     <module>ModuleTEST</module>                     
                     <name>testeur2</name>
                     <type>manual</type>
                 </model>
                    <model version="1.0">
                     <module>ModuleTEST</module>                     
                     <name>testeur3</name>
                     <type>manual</type>
                 </model>
            </models>
         </sequence>
    </sequences>
</Items>
